#| label: load-pkgs
#| message: false
#| warning: false
library(tidyverse)
library(geniusr)
library(dplyr)
library(tidytext)
# get lyrics
get_lyrics_search(artist_name = "Kanye West",
song_title = "Good Morning") %>%
# get lyric bigrams
unnest_tokens(bigram, line, token = "ngrams", n = 2) %>%
# look for good morning
filter(bigram == "good morning") %>%
# count bigram frequency
nrow()
library(geniusr)
library(dplyr)
library(tidytext)
genius_token(force = FALSE)
# get lyrics
get_lyrics_search(artist_name = "Kanye West",
song_title = "Good Morning") %>%
# get lyric bigrams
unnest_tokens(bigram, line, token = "ngrams", n = 2) %>%
# look for good morning
filter(bigram == "good morning") %>%
# count bigram frequency
nrow()
genius_token(force = FALSE)
# get lyrics
get_lyrics_search(artist_name = "Kanye West",
song_title = "Good Morning") %>%
# get lyric bigrams
unnest_tokens(bigram, line, token = "ngrams", n = 2) %>%
# look for good morning
filter(bigram == "good morning") %>%
# count bigram frequency
nrow()
# get lyrics
get_lyrics_search(artist_name = "Kanye West",
song_title = "Good Morning") %>%
# get lyric bigrams
unnest_tokens(bigram, line, token = "ngrams", n = 2) %>%
# look for good morning
filter(bigram == "good morning") %>%
# count bigram frequency
nrow()
genius_token(force = FALSE)
# get lyrics
get_lyrics_search(artist_name = "Kanye West",
song_title = "Good Morning") %>%
# get lyric bigrams
unnest_tokens(bigram, line, token = "ngrams", n = 2) %>%
# look for good morning
filter(bigram == "good morning") %>%
# count bigram frequency
nrow()
get_lyrics_search(artist_name = "Kanye West",
song_title = "Good Morning")
get_song(song_id = 90479)
get_artist(artist_id = 1421)
search_genius(search_term = "Compton")
if (FALSE) {
get_artist_df(artist_id = 16751)
}
if (FALSE) {
get_artist_df(artist_id = 16751)
}
get_artist_df(artist_id = 16751)
test <- get_artist_df(artist_id = 16751)
View(test)
?get_artist()
search_artist(search_term = "Stallion", n_results = 20)
get_artist(artist_id = 1125517)
get_artist_df(artist_id = 1125517)
get_artist_songs(
1125517,
sort = c("title", "popularity"),
include_features = FALSE,
access_token = genius_token()
)
get_artist_songs(artist_id = 1125517, sort = "popularity")
get_artist_songs_df(artist_id = 1125517, sort = "popularity")
meg <- get_artist_songs_df(artist_id = 1125517, sort = "popularity")
View(meg)
get_lyrics_id(song_id = 9985038)
get_lyrics_id(song_id = 90479)
get_lyrics_url(song_lyrics_url = "https://genius.com/Kendrick-lamar-dna-lyrics")
?get_lyrics_url
shakespeare_url <- "https://genius.com/Megan-thee-stallion-2-am-lyrics"
shakespeare <- RCurl::getURL(shakespeare_url)
data(shakespeare)
shakespeare %>%
str_split("\r\n") %>%
pluck(1)
length(shakespeare)
shake <- shakespeare %>%
str_subset("[A-Z](.)")
shake %>%
head()
devtools::install_github("averyrobbins1/appa")
library(tidyverse)
atla <- appa::appa
View(atla)
#| label: load-pkgs
#| message: false
#| warning: false
library(tidyverse)
install.packages("devtools")
devtools::install_github("averyrobbins1/appa")
install.packages("devtools")
#| label: load-data
#| message: false
## read data
atla <- appa::appa
atla %>%
filter(character == "Katara") %>%
str_detect(character_words, "[my mother]")
atla %>%
select(character == "Katara") %>%
str_detect(character_words, "[my mother]")
library(tidyverse)
library(dplyr)
library(stringr)
atla %>%
select(character == "Katara") %>%
str_detect(character_words, "[my mother]")
atla %>%
filter(character == "Katara") %>%
str_detect(character_words, "[my mother]")
atla %>%
filter(character == "Katara") +
str_detect(character_words, "[my mother]")
test <- atla %>%
filter(character == "Katara")
View(test)
test <- atla %>%
filter(character == "Katara") %>%
mutate(has_my_mother = str_detect(character_words, "my mother"))
View(test)
test <- atla %>%
filter(character == "Katara") %>%
mutate(has_my_mother = str_detect(character_words, "mother"))
View(test)
test <- atla %>%
filter(character == "Katara") %>%
mutate(has_my_mother = str_detect(character_words, "\\bmother\\b"))
test %>%
group_by(has_my_mother)
summarise(n())
test <- atla %>%
filter(character == "Katara") %>%
mutate(has_my_mother = str_detect(character_words, "\\bmother\\b"))
test %>%
group_by(has_my_mother) %>%
summarise(n())
test %>%
filter(has_my_mother == "TRUE")
test <- atla %>%
filter(character == "Katara") %>%
mutate(has_my_mother = str_detect(character_words, "\\bmom\\b"))
test %>%
group_by(has_my_mother) %>%
summarise(n())
test %>%
filter(has_my_mother == "TRUE")
$navbar-bg
?$navbar-bg
?navbar-bg
?html
View(test)
test %>%
group_by(has_my_mother) %>%
summarise(n())
test <- atla %>%
filter(character == "Katara") %>%
mutate(has_my_mother = str_detect(character_words, "\\bmom\\b"|"\\bmother\\b", ))
test <- atla %>%
filter(character == "Katara") %>%
mutate(has_my_mother = str_detect(character_words, "\\bmom\\b"|"\\bmother\\b"))
test <- atla %>%
filter(character == "Katara") %>%
mutate(has_my_mother = str_detect(character_words, "\\bmom\\b|\\bmother\\b"))
test %>%
group_by(has_my_mother) %>%
summarise(n())
test %>%
filter(has_my_mother == "TRUE")
?appa
# User interface
ui <- fluidPage(
titlePanel("Graph of Births"),
sidebarLayout(
sidebarPanel(
checkboxGroupInput("day", label = h3("Which Days Do you Want to Display?"),
choices = unique(Births2015$wday),
selected = "Sun")
),
mainPanel(plotOutput("graph")
)
)
)
# Server function
server <- function(input, output){
output$graph <- renderPlot({
Births2015 %>%
filter(wday %in% input$day) %>%
ggplot(mapping = aes(x = date, y = births,
color = wday)) +
geom_point() +
theme(legend.position = "bottom")
})
}
# Creates app
shinyApp(ui = ui, server = server)
# Creates app
shinyApp(ui = ui, server = server)
library(tidyverse)
library(shiny)
library(mosaic)
library(tidyverse)
library(shiny)
library(mosaic)
library(tidyverse)
library(shiny)
library(mosaic)
library(tidyverse)
Births2015 %>%
filter(wday %in% input$day) %>%
ggplot(mapping = aes(x = date, y = births,
color = wday)) +
geom_point() +
theme(legend.position = "bottom")
# User interface
ui <- fluidPage(
titlePanel("Graph of Births"),
sidebarLayout(
sidebarPanel(
checkboxGroupInput("day", label = h3("Which Days Do you Want to Display?"),
choices = unique(Births2015$wday),
selected = "Sun")
),
mainPanel(plotOutput("graph")
)
)
)
# Server function
server <- function(input, output){
output$graph <- renderPlot({
Births2015 %>%
filter(wday %in% input$day) %>%
ggplot(mapping = aes(x = date, y = births,
color = wday)) +
geom_point() +
theme(legend.position = "bottom")
})
}
# Creates app
shinyApp(ui = ui, server = server)
# Load libraries
library(shiny)
library(mosaic)
library(tidyverse)
# User interface
ui <- fluidPage(
titlePanel("Graph of Births"),
sidebarLayout(
sidebarPanel(
checkboxGroupInput("day", label = h3("Which Days Do you Want to Display?"),
choices = unique(Births2015$wday),
selected = "Sun")
),
mainPanel(plotOutput("graph")
)
)
)
# Server function
server <- function(input, output){
output$graph <- renderPlot({
Births2015 %>%
filter(wday %in% input$day) %>%
ggplot(mapping = aes(x = date, y = births,
color = wday)) +
geom_point() +
theme(legend.position = "bottom")
})
}
# Creates app
shinyApp(ui = ui, server = server)
library(readr)
Top_100_Trending_Books <- read_csv("~/Desktop/Data/project-02-bookish_trends/data/Top-100 Trending Books.csv")
View(Top_100_Trending_Books)
#| label: load-data
#| message: false
library(readr)
Top_100_Trending_Books <- read_csv("~/Desktop/Data/project-02-bookish_trends/data/Top-100 Trending Books.csv")
View(Top_100_Trending_Books)
#| label: setup
#| message: false
#| echo: false
library(tidyverse)
library(tidymodels)
library(openintro)
library(mdsr)
library(mosaicData)
library(shiny)
knitr::opts_chunk$set(
echo = TRUE,
message = FALSE,
warning = FALSE)
library(shiny)
library(ggplot2)
library(dplyr)
library(palmerpenguins)
library(DT)
ui <- fluidPage(
titlePanel("Penguins!"),
sidebarLayout(
sidebarPanel(
selectInput(inputId = "species",
label = "Select Species",
choices = unique(penguins$species)),
selectInput(inputId = "gender",
label = "Select Gender",
choices = c("Male" = "male",
"Female" = "female")),
selectInput(inputId = "attribute",
label = "Select Attribute",
choices = c("Bill Length (mm)" = "bill_length_mm",
"Bill Depth (mm)" = "bill_depth_mm",
"Flipper Length (mm)" = "flipper_length_mm",
"Body Mass (grams)"= "body_mass_g"))
),
mainPanel(
plotOutput(outputId = "scatterplot"),
DTOutput("datatable")
)
)
)
server <- function(input, output, session) {
filtered_penguin <- reactive({
penguins %>%
filter(species == input$species & sex == input$gender)
})
output$scatterplot <- renderPlot({
ggplot(data = filtered_penguin(),
mapping = aes_string(x = input$attribute, color = "island")) +
geom_point(stat = "count", aes(y = ..count..), size = 3, alpha = 0.8) +
labs(x = ifelse(input$attribute == "bill_length_mm", "Bill Length (mm)",
ifelse(input$attribute == "bill_depth_mm", "Bill Depth (mm)",
ifelse(input$attribute == "flipper_length_mm", "Flipper Length (mm)",
ifelse(input$attribute == "body_mass_g", "Body Mass (grams)", input$attribute)))),
y = "Count")
})
output$datatable <- renderDT({
filtered_penguin()
})
}
shinyApp(ui = ui, server = server)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(dplyr)
library(stringr)
devtools::install_github("averyrobbins1/appa")
atla <- appa::appa
atla <- appa::appa
library(tidyverse)
library(dplyr)
library(stringr)
atla <- appa::appa
library(tidyverse)
library(dplyr)
library(stringr)
atla <- appa::appa
write_csv(atla, "data/population.csv")
write_csv(atla, "EXTRA/data/population.csv")
write_csv(atla, "EXTRA/data/atla.csv")
View(atla)
View(atla)
