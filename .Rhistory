),
mainPanel(
plotlyOutput("plot")
)
)
)
server <- function(input, output) {
book_colors <- c("Water" = "#1f77b4",
"Earth" = "#2ca02c",
"Fire" = "#ad0000")
output$plot <- renderPlotly({
filtered_data <- atla %>%
filter(if ("All Directors" %in% input$director) TRUE else director %in% input$director)
plot <- ggplot(filtered_data %>%
mutate(Book = factor(Book, levels = c('Water', 'Earth', 'Fire'))),
aes(x = Episode, y = imdb_rating, color = Book, text = director)) +
geom_point() +
geom_line() +
labs(x = "Episode Number",
y = "Number of Per Episode",
color = "Book (season)") +
scale_color_manual(values = book_colors, breaks = c("Water", "Earth", "Fire"), limits = c("Water", "Earth", "Fire")) +
coord_cartesian(xlim = c(0, max(atla$Episode)), ylim = c(0, 10)) +
scale_x_continuous(breaks = seq(0, 60, by = 10)) +
scale_y_continuous(breaks = seq(0, max(10, by = 1)) +
aes(text = NULL)
ggplotly(plot)
library(shiny)
library(ggplot2)
library(dplyr)
library(plotly)
library(readr)
atla <- read_csv("EXTRA/data/atla.csv")
ui <- fluidPage(
titlePanel("Avatar: The Last Airbender Character Count"),
sidebarLayout(
sidebarPanel(
selectInput("director", "Select Director", choices = c("All Directors", unique(atla$director)), multiple = TRUE, selected = "All Directors"),
actionButton("updateBtn", "Update Results!")
),
mainPanel(
plotlyOutput("plot")
)
)
)
server <- function(input, output) {
book_colors <- c("Water" = "#1f77b4",
"Earth" = "#2ca02c",
"Fire" = "#ad0000")
output$plot <- renderPlotly({
filtered_data <- atla %>%
filter(if ("All Directors" %in% input$director) TRUE else director %in% input$director)
plot <- ggplot(filtered_data %>%
mutate(Book = factor(Book, levels = c('Water', 'Earth', 'Fire'))),
aes(x = Episode, y = imdb_rating, color = Book, text = director)) +
geom_point() +
geom_line() +
labs(x = "Episode Number",
y = "Number of Per Episode",
color = "Book (season)") +
scale_color_manual(values = book_colors, breaks = c("Water", "Earth", "Fire"), limits = c("Water", "Earth", "Fire")) +
aes(text = NULL)
ggplotly(plot)
})
}
shinyApp(ui = ui, server = server)
library(shiny)
library(ggplot2)
library(dplyr)
library(plotly)
library(readr)
atla <- read_csv("EXTRA/data/atla.csv")
ui <- fluidPage(
titlePanel("Avatar: The Last Airbender Character Count"),
sidebarLayout(
sidebarPanel(
selectInput("director", "Select Director", choices = c("All Directors", unique(atla$director)), multiple = TRUE, selected = "All Directors"),
actionButton("updateBtn", "Update Results!")
),
mainPanel(
plotlyOutput("plot")
)
)
)
server <- function(input, output) {
book_colors <- c("Water" = "#1f77b4",
"Earth" = "#2ca02c",
"Fire" = "#ad0000")
output$plot <- renderPlotly({
filtered_data <- atla %>%
filter(if ("All Directors" %in% input$director) TRUE else director %in% input$director)
plot <- ggplot(filtered_data %>%
mutate(Book = factor(Book, levels = c('Water', 'Earth', 'Fire'))),
aes(x = Episode, y = imdb_rating, color = Book, text = director)) +
geom_point() +
geom_line() +
labs(x = "Episode Number",
y = "Number of Per Episode",
color = "Book (season)") +
scale_color_manual(values = book_colors, breaks = c("Water", "Earth", "Fire"), limits = c("Water", "Earth", "Fire")) +
coord_cartesian(xlim = c(0, max(atla$Episode)), ylim = c(0, 10)) +
scale_x_continuous(breaks = seq(0, 60, by = 10)) +
scale_y_continuous(breaks = seq(0, max(10, by = 1))) +
aes(text = NULL)
ggplotly(plot)
})
}
shinyApp(ui = ui, server = server)
library(shiny)
library(ggplot2)
library(dplyr)
library(plotly)
library(readr)
atla <- read_csv("EXTRA/data/atla.csv")
ui <- fluidPage(
titlePanel("Avatar: The Last Airbender Character Count"),
sidebarLayout(
sidebarPanel(
selectInput("director", "Select Director", choices = c("All Directors", unique(atla$director)), multiple = TRUE, selected = "All Directors"),
actionButton("updateBtn", "Update Results!")
),
mainPanel(
plotlyOutput("plot")
)
)
)
server <- function(input, output) {
book_colors <- c("Water" = "#1f77b4",
"Earth" = "#2ca02c",
"Fire" = "#ad0000")
output$plot <- renderPlotly({
filtered_data <- atla %>%
filter(if ("All Directors" %in% input$director) TRUE else director %in% input$director)
plot <- ggplot(filtered_data %>%
mutate(Book = factor(Book, levels = c('Water', 'Earth', 'Fire'))),
aes(x = Episode, y = imdb_rating, color = Book, text = director)) +
geom_point() +
geom_line() +
labs(x = "Episode Number",
y = "Number of Per Episode",
color = "Book (season)") +
scale_color_manual(values = book_colors, breaks = c("Water", "Earth", "Fire"), limits = c("Water", "Earth", "Fire")) +
coord_cartesian(xlim = c(0, max(atla$Episode)), ylim = c(0, 10)) +
scale_x_continuous(breaks = seq(0, 60, by = 10)) +
scale_y_continuous(breaks = seq(0, max(10, by = 1)))
ggplotly(plot)
})
}
shinyApp(ui = ui, server = server)
library(shiny)
library(ggplot2)
library(dplyr)
library(plotly)
library(readr)
atla <- read_csv("EXTRA/data/atla.csv")
ui <- fluidPage(
titlePanel("Avatar: The Last Airbender Character Count"),
sidebarLayout(
sidebarPanel(
selectInput("director", "Select Director", choices = c("All Directors", unique(atla$director)), multiple = TRUE, selected = "All Directors"),
actionButton("updateBtn", "Update Results!")
),
mainPanel(
plotlyOutput("plot")
)
)
)
server <- function(input, output) {
book_colors <- c("Water" = "#1f77b4",
"Earth" = "#2ca02c",
"Fire" = "#ad0000")
output$plot <- renderPlotly({
filtered_data <- atla %>%
filter(if ("All Directors" %in% input$director) TRUE else director %in% input$director)
plot <- ggplot(filtered_data %>%
mutate(Book = factor(Book, levels = c('Water', 'Earth', 'Fire'))),
aes(x = Episode, y = imdb_rating, color = Book, text = director)) +
geom_point() +
geom_line() +
labs(x = "Episode Number",
y = "Number of Per Episode",
color = "Book (season)") +
scale_color_manual(values = book_colors, breaks = c("Water", "Earth", "Fire"), limits = c("Water", "Earth", "Fire")) +
coord_cartesian(xlim = c(0, max(atla$Episode)), ylim = c(0, 10)) +
scale_x_continuous(breaks = seq(0, 60, by = 10)) +
scale_y_continuous(breaks = seq(0, max(10, by = 1)))
ggplotly(plot)
})
}
shinyApp(ui = ui, server = server)
library(shiny)
library(ggplot2)
library(dplyr)
library(plotly)
library(readr)
atla <- read_csv("EXTRA/data/atla.csv")
ui <- fluidPage(
titlePanel("Avatar: The Last Airbender Character Count"),
sidebarLayout(
sidebarPanel(
selectInput("director", "Select Director", choices = c("All Directors", unique(atla$director)), multiple = TRUE, selected = "All Directors"),
actionButton("updateBtn", "Update Results!")
),
mainPanel(
plotlyOutput("plot")
)
)
)
server <- function(input, output) {
book_colors <- c("Water" = "#1f77b4",
"Earth" = "#2ca02c",
"Fire" = "#ad0000")
output$plot <- renderPlotly({
filtered_data <- atla %>%
filter(if ("All Directors" %in% input$director) TRUE else director %in% input$director)
plot <- ggplot(filtered_data %>%
mutate(Book = factor(Book, levels = c('Water', 'Earth', 'Fire'))),
aes(x = Episode, y = imdb_rating, color = Book, text = director)) +
geom_point() +
geom_line() +
labs(x = "Episode Number",
y = "Number of Per Episode",
color = "Book (season)") +
scale_color_manual(values = book_colors, breaks = c("Water", "Earth", "Fire"), limits = c("Water", "Earth", "Fire")) +
coord_cartesian(xlim = c(0, max(atla$Episode)), ylim = c(5, 10)) +
scale_x_continuous(breaks = seq(0, 60, by = 10)) +
scale_y_continuous(breaks = seq(5, max(10, by = 1)))
ggplotly(plot)
})
}
shinyApp(ui = ui, server = server)
library(shiny)
library(ggplot2)
library(dplyr)
library(plotly)
library(readr)
atla <- read_csv("EXTRA/data/atla.csv")
ui <- fluidPage(
titlePanel("Title"),
sidebarLayout(
sidebarPanel(
selectInput("character", "Select Character", choices = as.vector(unique(atla$character)),  selected = "Aang"),
selectInput("director", "Select Director", choices = c("All Directors", unique(atla$director)), multiple = TRUE, selected = "All Directors"),
actionButton("updateBtn", "Update Results!")
),
mainPanel(
plotlyOutput("plot")
)
)
)
server <- function(input, output) {
book_colors <- c("Water" = "#1f77b4",
"Earth" = "#2ca02c",
"Fire" = "#ad0000")
output$plot <- renderPlotly({
filtered_data <- atla %>%
filter(character %in% input$character,
if ("All Directors" %in% input$director) TRUE else director %in% input$director)
plot <- ggplot(filtered_data %>%
mutate(Book = factor(Book, levels = c('Water', 'Earth', 'Fire'))),
aes(x = Episode, y = Lines, color = Book, text = director)) +
geom_point() +
geom_line() +
labs(x = "Episode Number",
y = "Number of Lines Per Episode",
color = "Book (season)") +
scale_color_manual(values = book_colors, breaks = c("Water", "Earth", "Fire"), limits = c("Water", "Earth", "Fire")) +
coord_cartesian(xlim = c(0, max(atla$Episode)), ylim = c(0, max(atla$Lines))) +
scale_x_continuous(breaks = seq(0, 60, by = 10)) +
scale_y_continuous(breaks = seq(0, max(atla$Lines), by = 10)) +
aes(text = NULL)
plot
})
}
shinyApp(ui = ui, server = server)
View(atla)
View(eps)
View(character_count)
library(shiny)
library(ggplot2)
library(dplyr)
library(plotly)
library(readr)
atla <- read_csv("EXTRA/data/atla.csv")
ui <- fluidPage(
titlePanel("Title"),
sidebarLayout(
sidebarPanel(
selectInput("character", "Select Character", choices = as.vector(unique(atla$character)),  selected = "Aang"),
selectInput("director", "Select Director", choices = c("All Directors", unique(atla$director)), multiple = TRUE, selected = "All Directors"),
actionButton("updateBtn", "Update Results!")
),
mainPanel(
plotlyOutput("plot")
)
)
)
server <- function(input, output) {
book_colors <- c("Water" = "#1f77b4",
"Earth" = "#2ca02c",
"Fire" = "#ad0000")
output$plot <- renderPlotly({
filtered_data <- atla %>%
filter(character %in% input$character,
if ("All Directors" %in% input$director) TRUE else director %in% input$director)
plot <- ggplot(filtered_data %>%
mutate(Book = factor(Book, levels = c('Water', 'Earth', 'Fire'))),
aes(x = Episode, y = Lines, color = Book, text = director)) +
geom_point() +
geom_line() +
labs(x = "Episode Number",
y = "Number of Lines Per Episode",
color = "Book (season)") +
scale_color_manual(values = book_colors, breaks = c("Water", "Earth", "Fire"), limits = c("Water", "Earth", "Fire")) +
coord_cartesian(xlim = c(0, max(atla$Episode)), ylim = c(0, max(atla$Lines))) +
scale_x_continuous(breaks = seq(0, 60, by = 10)) +
scale_y_continuous(breaks = seq(0, max(atla$Lines), by = 10)) +
aes(text = NULL)
plot
})
}
shinyApp(ui = ui, server = server)
library(tidyverse)
library(dplyr)
library(stringr)
appa <- appa::appa
character_count <- appa %>%
group_by(chapter, character) %>%
mutate(character = str_split(character, " and ")) %>%
unnest(character) %>%
mutate(director = str_split(director, " , ")) %>%
unnest(director) %>%
summarise(Lines = n(), id, Book = book, book_num, chapter, chapter_num, writer, director, imdb_rating) %>%
filter(character != "Scene Description")
eps <- appa %>%
group_by(chapter) %>%
summarise() %>%
mutate(Episode = row_number())
atla <- left_join(character_count, eps, by = "chapter") %>%
arrange(desc(character_count))
write_csv(atla, "EXTRA/data/atla.csv")
library(shiny)
library(ggplot2)
library(dplyr)
library(plotly)
library(readr)
atla <- read_csv("EXTRA/data/atla.csv")
ui <- fluidPage(
titlePanel("Title"),
sidebarLayout(
sidebarPanel(
selectInput("character", "Select Character", choices = as.vector(unique(atla$character)),  selected = "Aang"),
selectInput("director", "Select Director", choices = c("All Directors", unique(atla$director)), multiple = TRUE, selected = "All Directors"),
actionButton("updateBtn", "Update Results!")
),
mainPanel(
plotlyOutput("plot")
)
)
)
server <- function(input, output) {
book_colors <- c("Water" = "#1f77b4",
"Earth" = "#2ca02c",
"Fire" = "#ad0000")
output$plot <- renderPlotly({
filtered_data <- atla %>%
filter(character %in% input$character,
if ("All Directors" %in% input$director) TRUE else director %in% input$director)
plot <- ggplot(filtered_data %>%
mutate(Book = factor(Book, levels = c('Water', 'Earth', 'Fire'))),
aes(x = Episode, y = Lines, color = Book, text = director)) +
geom_point() +
geom_line() +
labs(x = "Episode Number",
y = "Number of Lines Per Episode",
color = "Book (season)") +
scale_color_manual(values = book_colors, breaks = c("Water", "Earth", "Fire"), limits = c("Water", "Earth", "Fire")) +
coord_cartesian(xlim = c(0, max(atla$Episode)), ylim = c(0, max(atla$Lines))) +
scale_x_continuous(breaks = seq(0, 60, by = 10)) +
scale_y_continuous(breaks = seq(0, max(atla$Lines), by = 10)) +
aes(text = NULL)
plot
})
}
shinyApp(ui = ui, server = server)
View(atla)
View(appa)
atla %>% group_by(director) %>% sum(director)
atla %>% group_by(director) %>% sum()
atla %>% group_by(director) %>% summarise(n())
library(tidyverse)
library(dplyr)
library(stringr)
appa <- appa::appa
character_count <- appa %>%
group_by(chapter, character) %>%
mutate(character = str_split(character, " and ")) %>%
unnest(character) %>%
summarise(Lines = n(), id, Book = book, book_num, chapter, chapter_num, writer, director, imdb_rating) %>%
filter(character != "Scene Description")
eps <- appa %>%
group_by(chapter) %>%
summarise() %>%
mutate(Episode = row_number())
atla <- left_join(character_count, eps, by = "chapter") %>%
arrange(desc(character_count))
write_csv(atla, "EXTRA/data/atla.csv")
atla %>% group_by(director) %>% summarise(n())
library(tidyverse)
library(dplyr)
library(stringr)
appa <- appa::appa
character_count <- appa %>%
group_by(chapter, character) %>%
mutate(character = str_split(character, " and ")) %>%
unnest(character) %>%
summarise(Lines = n(), id, Book = book, book_num, chapter, chapter_num, writer, director, imdb_rating) %>%
filter(character != "Scene Description")
eps <- appa %>%
group_by(chapter) %>%
summarise() %>%
mutate(Episode = row_number())
atla <- left_join(character_count, eps, by = "chapter") %>%
arrange(desc(character_count))
write_csv(atla, "EXTRA/data/atla.csv")
library(shiny)
library(ggplot2)
library(dplyr)
library(plotly)
library(readr)
atla <- read_csv("EXTRA/data/atla.csv")
ui <- fluidPage(
titlePanel("Title"),
sidebarLayout(
sidebarPanel(
selectInput("character", "Select Character", choices = as.vector(unique(atla$character)),  selected = "Aang"),
selectInput("director", "Select Director", choices = c("All Directors", unique(atla$director)), multiple = TRUE, selected = "All Directors"),
actionButton("updateBtn", "Update Results!")
),
mainPanel(
plotlyOutput("plot")
)
)
)
server <- function(input, output) {
book_colors <- c("Water" = "#1f77b4",
"Earth" = "#2ca02c",
"Fire" = "#ad0000")
output$plot <- renderPlotly({
filtered_data <- atla %>%
filter(character %in% input$character,
if ("All Directors" %in% input$director) TRUE else director %in% input$director)
plot <- ggplot(filtered_data %>%
mutate(Book = factor(Book, levels = c('Water', 'Earth', 'Fire'))),
aes(x = Episode, y = Lines, color = Book, text = director)) +
geom_point() +
geom_line() +
labs(x = "Episode Number",
y = "Number of Lines Per Episode",
color = "Book (season)") +
scale_color_manual(values = book_colors, breaks = c("Water", "Earth", "Fire"), limits = c("Water", "Earth", "Fire")) +
coord_cartesian(xlim = c(0, max(atla$Episode)), ylim = c(0, max(atla$Lines))) +
scale_x_continuous(breaks = seq(0, 60, by = 10)) +
scale_y_continuous(breaks = seq(0, max(atla$Lines), by = 10)) +
aes(text = NULL)
plot
})
}
shinyApp(ui = ui, server = server)
library(shiny)
library(ggplot2)
library(dplyr)
library(plotly)
library(readr)
atla <- read_csv("EXTRA/data/atla.csv")
ui <- fluidPage(
titlePanel("Title"),
sidebarLayout(
sidebarPanel(
selectInput("character", "Select Character", choices = as.vector(unique(atla$character)),  selected = "Aang"),
selectInput("director", "Select Director", choices = c("All Directors", unique(atla$director)), multiple = TRUE, selected = "All Directors"),
actionButton("updateBtn", "Update Results!")
),
mainPanel(
plotlyOutput("plot")
)
)
)
server <- function(input, output) {
book_colors <- c("Water" = "#1f77b4",
"Earth" = "#2ca02c",
"Fire" = "#ad0000")
output$plot <- renderPlotly({
filtered_data <- atla %>%
filter(character %in% input$character,
if ("All Directors" %in% input$director) TRUE else director %in% input$director)
plot <- ggplot(filtered_data %>%
mutate(Book = factor(Book, levels = c('Water', 'Earth', 'Fire'))),
aes(x = Episode, y = Lines, color = Book, text = director)) +
geom_point() +
geom_line() +
labs(x = "Episode Number",
y = "Number of Lines Per Episode",
color = "Book (season)") +
scale_color_manual(values = book_colors, breaks = c("Water", "Earth", "Fire"), limits = c("Water", "Earth", "Fire")) +
coord_cartesian(xlim = c(0, max(atla$Episode)), ylim = c(0, max(atla$Lines))) +
scale_x_continuous(breaks = seq(0, 60, by = 10)) +
scale_y_continuous(breaks = seq(0, max(atla$Lines), by = 10))
plot
})
}
shinyApp(ui = ui, server = server)
