---
title: "Wan Shi Tong's Library"
subtitle: "Project Write Up"
author: "Morgen Kaufman"
format: html
editor: visual
execute:
  echo: false
  warning: false
  message: false
---

```{r}
#| label: load-packages
#| include: false

library(ggplot2)
library(dplyr)
library(readr)
library(RColorBrewer)
library(tidyverse)
library(knitr)
library(kableExtra)
library(gridExtra)
library(grid)
```

```{r}
#| label: load-data
#| include: false

atla <- read_csv("~/Desktop/Data/project-02-morgenk/EXTRA/data/atla.csv")
```

## Introduction

In this project, I sought to answer a number of questions regarding the 2000s children's TV show Avatar: The Last Airbender. How are lines distributed across episodes? How does it differ by character? How does it differ by season? How does it differ by director? How do IMDB scores change over the course of the show? What is the IMDB score average per season? To answer these questions, I used the[ appa package](https://github.com/averyrobbins1/appa) by[ Avery Robbins](https://github.com/averyrobbins1). The purpose of this package is to “provide an easy way to share Avatar: The Last Airbender transcript data.” The package includes a dataset containing the transcripts, writers, directors, and IMDB ratings of every episode of the show. The data is organized by lines of the script with each row corresponding to one line (either spoken by a character or scene descriptions). The show consists of 61 episodes and 3 books (seasons). The data frame includes 13,385 rows and 12 variables. The included variables are as follows: 

| Variable Name     | Description                                                             |
|----------------------|--------------------------------------------------|
| id                | an id number for each row, essentially just a row number                |
| book              | the name of each book, or season, in the series: Water, Earth, and Fire |
| book_num          | an id number for each book, 1-3                                         |
| chapter           | the name of each chapter, or episode, in the series                     |
| chapter_num       | an id number for each chapter                                           |
| character         | every character who ever spoke in the series                            |
| full_text         | the words spoken by each character + additional scene descriptions      |
| character_words   | the words spoken by each character                                      |
| scene_description | the descriptions of what is happening on screen                         |
| writer            | the writer, or writers, for each episode                                |
| director          | the director for each episode                                           |
| imdb_rating       | imdb ratings on a scale of 1 to 10                                      |

However, for this project, I used a new dataset created by wrangling the appa data.

To do this I first did some data wrangling which removed scene descriptions and split lines spoken by multiple characters. Then a new column called "episode" was created which assigns each episode across all seasons a corresponding number 1-61 (in the original set the numbers reset for each season). Next, the data was grouped by character and episode to calculate another column called "lines" which calculates the sum of rows for each character in each episode, this allows for us to now have a numeric variable for the number of lines spoken by a character. This new, modified dataset is called "atla" and will be the primary dataset for this project. The newly created atla data frame includes 10010 observations and 13 variables.

## Approach

To answer these questions, I created two shiny apps that allow users to explore the dataset. Additionally, I have also generated some summary statistics that allow for easy exploration of the data. The first shiny app is an interactive scatter and line plot that allows for filtering by characters, directors, and seasons. Along the x-axis is the episode number (1-61) and the y-axis is the line count. The same kind of app was created for IMDB exploration with the IMDB score on the y-axis and the character filter removed. The apps were made to allow users to explore a wide range of available data. The plots were created using a combination of ggplot and plotly to allow for interactive line tracing and point highlighting as well as zoom features.

## Apps and Visualizations

### Apps

Apps can be found [here](https://2s3kzj-morgen-k.shinyapps.io/shinyapp/)!

[![](images/newplot-2.png)](https://2s3kzj-morgen-k.shinyapps.io/shinyapp/)

### Line Summary Statistics

#### Number of Lines

```{r, echo=FALSE, fig.align = "center"}
all_episode_counts <- atla %>%
  group_by(Episode, character) %>%
  summarise(count = n())

all_episode_counts <- all_episode_counts %>%
  group_by(Episode) %>%
  summarise(total = sum(count)) %>%
  arrange(desc(total))


all_book_counts <- atla %>%
  group_by(book_num, character) %>%
  summarise(count = n())

all_book_counts <- all_book_counts %>%
  group_by(book_num) %>%
  summarise(total = sum(count)) %>%
  arrange(desc(total))

all_sum <- all_episode_counts %>%
  summarise(
    Mean = mean(total),
    Median = median(total),
    Min = min(total),
    Max = max(total),
    SD = sd(total))

print(kable(all_sum, align = "c", "simple"))
```

#### Season line breakdown

-   Book 1 - Water : 3,501

-   Book 2 - Earth : 3,322

-   Book 3 - Fire : 3,187

Top episodes are ep 14 (248 lines) and ep 10 (242 lines)

#### Aggregate Line Visualization

```{r, echo=FALSE, fig.align = "center"}
all_episode_counts %>% 
  ggplot(aes(x = Episode, y = total)) +
  geom_point(color = "blue", size = 2) +
  geom_line(color = "darkblue") +
  geom_smooth() + 
  labs(x = "Episode",
       y = "Total Lines",
       title = "Total Lines per Episode") +
  scale_x_continuous(breaks = seq(0, 61, by = 5)) +
  theme_minimal() 
```

### IMDB Summary Statistics

#### Director IMDB

```{r, echo=FALSE}
summary_stats <- atla %>%
  summarise(
    Mean = mean(IMDB, na.rm = TRUE),
    Median = median(IMDB, na.rm = TRUE),
    Min = min(IMDB, na.rm = TRUE),
    Max = max(IMDB, na.rm = TRUE),
    SD = sd(IMDB, na.rm = TRUE),
    Episodes = n_distinct(Episode)
  ) %>%
  mutate(director = "All")

summary_stats2 <- atla %>%
  group_by(director) %>%
  summarise(
    Mean = mean(IMDB, na.rm = TRUE),
    Median = median(IMDB, na.rm = TRUE),
    Min = min(IMDB, na.rm = TRUE),
    Max = max(IMDB, na.rm = TRUE),
    SD = sd(IMDB, na.rm = TRUE),
    Episodes = n_distinct(Episode)
  )

stats_all <- bind_rows(summary_stats, summary_stats2)

stats_all_round <- stats_all %>%
  mutate(
    Mean = round(Mean, digits = 2),
    SD = round(SD, digits = 2)) %>%
  rename(Director = director)


print(kable(stats_all_round, align = "c", "simple"))
```

#### Season IMDB

```{r, echo=FALSE}
summary_stats3 <- atla %>%
  group_by(Book, book_num) %>%
  summarise(
    Mean = mean(IMDB, na.rm = TRUE),
    Median = median(IMDB, na.rm = TRUE),
    Min = min(IMDB, na.rm = TRUE),
    Max = max(IMDB, na.rm = TRUE),
    SD = sd(IMDB, na.rm = TRUE),
    Episodes = n_distinct(Episode)
  ) %>%
  arrange(book_num)

book_stats <- summary_stats3 %>%
  mutate(
    Mean = round(Mean, digits = 2),
    SD = round(SD, digits = 2) )%>%
  rename("Book #" = book_num)


print(kable(book_stats, align = "c", "simple"))
```

## Discussion

From these summary statistics and the accompanying apps, we can draw a number of conclusions. Because the purpose of the apps was to allow for maximum customization, it would be too time-consuming to discuss all observations we can gather. As such the following conclusions are not the only things we can gather and more specific explorations (ie a specific character or director) may yield more in-depth information. 

To begin with I would like to discuss the information we can gather from the line-focused portion of this project. Using the line-centered data, we can see that as the show progressed, the number of lines per season dropped although only marginally there is a slight downward trend. This trend however is not strong enough to make any concrete conclusions. We can also see that towards the very end of a season, the number of total lines seems to drop quite drastically. Although this would need further investigation My hypothesis for this is that the season finale episodes may be more action-heavy and thus rely less on dialogue. Additionally, it may be that the number of lines decreases but length of lines increased (ie characters have long monologues). In the case of the main characters (Aang, Sokka, and Katara) there is a general trend of the number of lines for the character to spike in the middle / later end of a season with a drop towards the very end of the season. Given the previous observation regarding total lines, it can also be deduced that the main characters tend to make up the majority of the line count. The exception to this is the character Jet who only makes an appearance in a few episodes but maintains the most number of lines in a single episode (this being episode 10 with 74 lines). The following Jet however, is Aang (the main character) with 73 lines in episode 14. Additionally, the number of lines for characters fluctuates from episode to episode with no clear observable trend. By looking at some characters such as Azula, Toph, and Zuko, we can pinpoint key episodes in which the character likely played a large role by looking at the line trend. We can also see that the director did not have any clear impact on the number of lines any given character had in an episode. As such we may wish to explore the episode writers to see if that variable has an impact on the observations.

As for IMDB ratings, we can see in the season breakdown of IMDB scores, that the lowest rating the show ever got was 7.1, with some of the highest ratings reaching almost a full 10 (perfect score). Additionally, the director did not seem to have any direct correlation to the IMDB rating. IMDB ratings also overall have a slight upward trend. IMDB ratings also seem to be possibly influenced by the episode's position in the season with episodes that are placed towards the end of a season having higher ratings than those towards the start.

The main limitation of this project is that there is no marking made for character and director gender identity. Initially, this was something that I wished to explore as well but due to the time commitment of having to manually create a new variable, I was unable to accomplish this task. Additionally, I also had wanted to explore characters per line/line length but this was again a time issue.

## Code

Data Wrangling

```{r, eval=FALSE, echo=TRUE}

library(tidyverse)
library(dplyr)
library(stringr)
appa <- appa::appa

character_count <- appa %>%
  group_by(chapter, character) %>%
  mutate(character = str_split(character, " and ")) %>%
  unnest(character) %>%
  summarise(Lines = n(), id, Book = book, book_num, chapter, chapter_num, writer, director, imdb_rating) %>%
  filter(character != "Scene Description")  

eps <- appa %>%
  group_by(chapter) %>%
  summarise() %>%
  mutate(Episode = row_number())

atla <- left_join(character_count, eps, by = "chapter") %>%
  group_by(character) %>%
  mutate(sum(Lines)) %>%
  mutate("IMDB" = imdb_rating) %>%
  arrange(desc(Lines))
 
write_csv(atla, "~/Desktop/Data/project-02-morgenk/EXTRA/data/atla.csv")
write_csv(atla, "~/Desktop/Data/project-02-morgenk/EXTRA/shinyapp/atla.csv")
```

Summary Statistics

```{r, eval=FALSE, echo=TRUE}
all_episode_counts <- atla %>%
  group_by(Episode, character) %>%
  summarise(count = n())

all_episode_counts <- all_episode_counts %>%
  group_by(Episode) %>%
  summarise(total = sum(count)) %>%
  arrange(desc(total))


all_book_counts <- atla %>%
  group_by(book_num, character) %>%
  summarise(count = n())

all_book_counts <- all_book_counts %>%
  group_by(book_num) %>%
  summarise(total = sum(count)) %>%
  arrange(desc(total))

all_sum <- all_episode_counts %>%
  summarise(
    Mean = mean(total),
    Median = median(total),
    Min = min(total),
    Max = max(total),
    SD = sd(total))

print(kable(all_sum, align = "c", "simple"))



all_episode_counts %>% 
  ggplot(aes(x = Episode, y = total)) +
  geom_point(color = "blue", size = 2) +
  geom_line(color = "darkblue") +
  geom_smooth() + 
  labs(x = "Episode",
       y = "Total Lines",
       title = "Total Lines per Episode") +
  scale_x_continuous(breaks = seq(0, 61, by = 5)) +
  theme_minimal() 

summary_stats <- atla %>%
  summarise(
    Mean = mean(IMDB, na.rm = TRUE),
    Median = median(IMDB, na.rm = TRUE),
    Min = min(IMDB, na.rm = TRUE),
    Max = max(IMDB, na.rm = TRUE),
    SD = sd(IMDB, na.rm = TRUE),
    Episodes = n_distinct(Episode)
  ) %>%
  mutate(director = "All")

summary_stats2 <- atla %>%
  group_by(director) %>%
  summarise(
    Mean = mean(IMDB, na.rm = TRUE),
    Median = median(IMDB, na.rm = TRUE),
    Min = min(IMDB, na.rm = TRUE),
    Max = max(IMDB, na.rm = TRUE),
    SD = sd(IMDB, na.rm = TRUE),
    Episodes = n_distinct(Episode)
  )

stats_all <- bind_rows(summary_stats, summary_stats2)

stats_all_round <- stats_all %>%
  mutate(
    Mean = round(Mean, digits = 2),
    SD = round(SD, digits = 2)) %>%
  rename(Director = director)


print(kable(stats_all_round, align = "c", "simple"))


summary_stats3 <- atla %>%
  group_by(Book, book_num) %>%
  summarise(
    Mean = mean(IMDB, na.rm = TRUE),
    Median = median(IMDB, na.rm = TRUE),
    Min = min(IMDB, na.rm = TRUE),
    Max = max(IMDB, na.rm = TRUE),
    SD = sd(IMDB, na.rm = TRUE),
    Episodes = n_distinct(Episode)
  ) %>%
  arrange(book_num)

book_stats <- summary_stats3 %>%
  mutate(
    Mean = round(Mean, digits = 2),
    SD = round(SD, digits = 2) )%>%
  rename("Book #" = book_num)


print(kable(book_stats, align = "c", "simple"))
```

Shiny App Code

```{r, eval=FALSE, echo=TRUE}
library(shiny)
library(shinydashboard)
library(ggplot2)
library(dplyr)
library(plotly)
library(readr)
library(RColorBrewer)
library(tidyverse)
library(stringr)

atla <- read_csv("atla.csv")


ui <- dashboardPage(
  dashboardHeader(title = "Wan Shi Tong's Library"),
  dashboardSidebar(
    sidebarMenu(
      menuItem("Character Line Analysis", tabName = "character_analysis", icon = icon("heart")),
      menuItem("IMDB Analysis", tabName = "imdb_analysis", icon = icon("heart"))
    )
  ),
  dashboardBody(
    tabItems(
      tabItem(tabName = "character_analysis",
              fluidPage(
                titlePanel("Character Line Analysis"),
                sidebarLayout(
                  sidebarPanel(
                    selectInput("character_char", "Select Character(s)", choices = as.vector(unique(atla$character)),  multiple = TRUE, selected = "Aang"),
                    selectInput("director_char", "Select Director", choices = c("All Directors", unique(atla$director)), multiple = TRUE, selected = "All Directors"),
                    submitButton("Update Results!")
                  ),
                  mainPanel(
                    plotlyOutput("plot_char")
                  )
                )
              )
      ),
      tabItem(tabName = "imdb_analysis",
              fluidPage(
                titlePanel("IMDB Analysis"),
                sidebarLayout(
                  sidebarPanel(
                    selectInput("director_imdb", "Select Director", choices = c("All Directors", unique(atla$director)), multiple = TRUE, selected = "All Directors"),
                    submitButton("Update Results!")
                  ),
                  mainPanel(
                    plotlyOutput("plot_imdb")
                  )
                )
              )
      ),
  
      tabItem(tabName = "Credits",
              fluidPage(
                titlePanel("Credits and Copyright Information"),
                mainPanel(
                  h3("Copyright Information"),
                  p("test")
                )
              )
    
      )
    )
  ),
  skin = "purple" 
)


server <- function(input, output, session) {
  
  book_colors <- c("Water" = "#1f77b4", 
                   "Earth" = "#2ca02c", 
                   "Fire" = "#ad0000") 
  
  palette_name <- "Set1"
  character_palette <- brewer.pal(n = 10, name = palette_name)
  
  plot_data_char <- reactive({
    filtered_data_line <- atla %>%
      filter(character %in% input$character_char,
             if ("All Directors" %in% input$director_char) TRUE else director %in% input$director_char)
    
    palette_name <- "Set1"
    director_palette <- brewer.pal(n = 10, name = palette_name)
    
    plot_line <- ggplot(filtered_data_line %>%
                          mutate(Book = factor(Book, levels = c("Water", "Earth", "Fire"))),
                        aes(x = Episode, y = Lines))
    validate(
      need(nrow(filtered_data_line) > 0, "No data available for the selected filters."),
      need(length(input$character_char) <= 5, "Please only select up to 10 characters.")
    )  
    
    if (length(input$character_char) == 1) {
      plot_line <- plot_line +
        geom_point(aes(color = Book, text = paste("IMDB:", IMDB, "<br>", "Director:", director))) +
        scale_color_manual(values = book_colors, breaks = c("Water", "Earth", "Fire"), limits = c("Water", "Earth", "Fire")) +
        geom_line(aes(color = Book))
    } else {  
      plot_line <- plot_line +
        geom_point(aes(color = character, text = paste("IMDB:", IMDB, "<br>", "Director:", director))) +
        scale_color_manual(values = character_palette) +  
        geom_line(aes(color = character))
    }
    
    plot_line <- plot_line +
      labs(x = "Episode Number",
           y = "Number of Lines",
           title = "Number of Lines per Episode",
           color = if (length(input$character_char) == 1) "Book (season)" else "Character")+
      coord_cartesian(xlim = c(0, max(filtered_data_line$Episode)), ylim = c(0, max(filtered_data_line$Lines))) + 
      scale_x_continuous(breaks = seq(0, 61, by = 10)) + 
      scale_y_continuous(breaks = seq(0, max(filtered_data_line$Lines), by = 10))
    
    
    return(plot_line)
  })
  
plot_data <- reactive({
  
  filtered_data <- atla %>%
    filter(if ("All Directors" %in% input$director_imdb) TRUE else director %in% input$director_imdb)
  
  validate(
    need(nrow(filtered_data) > 0, "No data available for the selected filters."))

  
  palette_name <- "Set1"
  director_palette <- brewer.pal(n = 10, name = palette_name)
  
  plot <- ggplot(filtered_data %>%
                   mutate(Book = factor(Book, levels = c("Water", "Earth", "Fire"))),
                 aes(x = Episode, y = IMDB)) 
  
  if (length(input$director_imdb) == 1) {
    plot <- plot +
      geom_point(aes(color = Book,  text = paste("Director:", director))) +
      scale_color_manual(values = book_colors, breaks = c("Water", "Earth", "Fire"), limits = c("Water", "Earth", "Fire")) +
      geom_line(aes(color = Book)) +
      geom_smooth(aes(color = "Smooth"), size = 0.5, alpha = 0.2)
  } else {  
    plot <- plot +
      geom_point(aes(color = director, text = paste("Director:", director))) +
      scale_color_manual(values = director_palette) +  
      geom_line(aes(color = director)) 
  }
  
  plot <- plot +
    labs(x = "Episode Number",
         y = "Episode IMDB Rating",
         title = "IMDB Rating per Episode",
         color = if (length(input$director_imdb) == 1) "Book (season)" else "Character") +
    coord_cartesian(xlim = c(0, max(filtered_data$Episode)), ylim = c(5, 10)) + 
    scale_x_continuous(breaks = seq(0, 61, by = 10)) + 
    scale_y_continuous(breaks = seq(5, 10, by = 1))
  
  return(plot)
})

output$plot_char <- renderPlotly({
  plot_data_char_value <- plot_data_char()
  plotly::ggplotly(plot_data_char_value)
})

output$plot_imdb <- renderPlotly({
  plot_data_value <- plot_data()
  plotly::ggplotly(plot_data_value)
})
}

shinyApp(ui = ui, server = server)
```
